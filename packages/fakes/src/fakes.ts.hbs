import { build } from "@bonfhir/core";
import type { ExtractResource, ResourceType } from "@bonfhir/core";
{{#each (fhirPath data.[profiles-types] "Bundle/ComplexElements")}}
import type { {{type}} } from "fhir/r4";
{{/each}}
{{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
import type { {{type}} } from "fhir/r4";
{{/each}}

/**
 * Create a fake FHIR resource.
 * This is NOT synthetic data. Every value is randomized.
 */
export function fake<TResource extends ResourceType>(
  resourceType: TResource,
  override: Partial<Omit<ExtractResource<TResource>, "resourceType">> | null | undefined
): ExtractResource<TResource> {

  switch(resourceType) {
    {{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
    case "{{type}}":
      return build(resourceType, {...fake{{type}}(),...override} as unknown as Omit<ExtractResource<TResource>, "resourceType">);
    {{/each}}
    default:
      throw new Error(`Unsupported fake for resource type ${resourceType}`);
  }
}

{{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
function fake{{type}}(): {{type}} {
  throw new Error();
}
{{/each}}
