import type { DomainResource, FhirResource, Resource } from "fhir/r4";
{{#each (fhirPath data.[profiles-types] "Bundle/ComplexElements")}}
import type { {{type}} } from "fhir/r4";
{{/each}}

/**
 * All the possible resource types.
 */
export type ResourceType = FhirResource["resourceType"];

/**
 * Allow referencing a resource type from its string ResourceType representation.
 */
export type ExtractResource<TResourceType extends ResourceType> = Extract<
  FhirResource,
  { resourceType: TResourceType }
>;

/**
 * All the resources types for DomainResource only.
 */
export const DomainResourceTypes: string[] = [
{{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
"{{type}}",
{{/each}}
];

/**
 * Return true if `resource` is a `DomainResource`.
 */
export function isDomainResource(
  resource: Resource
): resource is DomainResource {
  return DomainResourceTypes.includes(resource.resourceType);
}

export type AnnotatedComplexElement =
{{#each (fhirPath data.[profiles-types] "Bundle/ComplexElements")}}| ({{type}} & { readonly elementType: "{{type}}" }){{/each}};

export type ComplexElementType = AnnotatedComplexElement["elementType"];

/**
 * Allow referencing a resource type from its string ResourceType representation.
 */
export type ExtractComplexElement<TComplexElement extends ComplexElementType> = Omit<Extract<AnnotatedComplexElement, { elementType: TComplexElement }>, "elementType">;

export type PrimitiveElementType = {{#each (fhirPath data.[profiles-types] "Bundle/PrimitiveElements")}}| "{{type}}"{{/each}};

/**
 *  Create a new type from T with K attributes required.
 */
export type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

/**
 * Returns the given `value` as is if it satisfies `Array.isArray` or otherwise
 * wraps the given `value` in an array.
 */
export function asArray<T>(
  value: T
): T extends ReadonlyArray<unknown> ? T : [T] {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return Array.isArray(value) ? (value as any) : [value];
}

/**
 * Return true if the object is a FhirResource of a specific type.
 */
export function isFhirResource<TResource extends ResourceType>(
  type: TResource,
  object: unknown | null | undefined
): object is ExtractResource<TResource> {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return (object as any)?.resourceType === type;
}
