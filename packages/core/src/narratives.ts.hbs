/* eslint-disable @typescript-eslint/no-explicit-any */
import type { ElementDefinitionType, FhirResource, Narrative } from "fhir/r4";
import { ResourceType } from "./types";
import _ from "lodash";
{{#fhirPath data.[profiles-resources] "Bundle.entry.select(resource).ofType(StructureDefinition).where(baseDefinition='http://hl7.org/fhir/StructureDefinition/DomainResource')"}}
import type { {{type}} } from "fhir/r4";
{{/fhirPath}}
{{#fhirPath data.[profiles-types] "Bundle.entry.select(resource).ofType(StructureDefinition).where(baseDefinition='http://hl7.org/fhir/StructureDefinition/Element' and kind='complex-type')"}}
import type { {{type}} } from "fhir/r4";
{{/fhirPath}}

export function narrative<TResourceType extends FhirResource>(resource: TResourceType): Narrative {
  switch(resource.resourceType) {
    {{#fhirPath data.[profiles-resources] "Bundle.entry.select(resource).ofType(StructureDefinition).where(baseDefinition='http://hl7.org/fhir/StructureDefinition/DomainResource')"}}
    case "{{type}}":
      return narrative{{type}}(resource);
    {{/fhirPath}}
    default:
      throw new Error(`Unsupported narrative for resource type ${resource.resourceType}`);
  }
}

{{#fhirPath data.[profiles-resources] "Bundle.entry.select(resource).ofType(StructureDefinition).where(baseDefinition='http://hl7.org/fhir/StructureDefinition/DomainResource')"}}
function narrative{{type}}(resource: {{type}}): Narrative {
  return buildNarrative([
    {{#fhirPath this "StructureDefinition.snapshot.element.where(isSummary=true)"}}
      {{#if (notIn (elementImmediatePath path) "meta,implicitRules,language,text,contained,extensions,modifierExtensions")}}
        {
            attr: "{{startCase (elementImmediatePath path)}}",
            value: resource.{{elementImmediatePath path}},
            max: "{{max}}",
            type: {{JSONstringify type.[0]}}
        },
      {{/if}}
    {{/fhirPath}}
  ]);
}

{{/fhirPath}}

export interface NarrativeComponent {
  attr: string;
  value: any;
  max: "1" | "*";
  type: ElementDefinitionType;
}

export function buildNarrative(components: NarrativeComponent[]): Narrative {
  return {
    status: "generated",
    div: `<div xmlns="http://www.w3.org/1999/xhtml" class="fhir-narrative"><ul>${components
      .map(renderNarrativeComponentValue)
      .filter((x) => !!x)}</ul></div>`,
  };
}

export function renderNarrativeComponentValue(
  component: NarrativeComponent
): string | undefined {
  try {
    if (!component.value) {
      return undefined;
    }

    switch (component.type?.code) {
      {{#fhirPath data.[profiles-types] "Bundle.entry.select(resource).ofType(StructureDefinition).where(baseDefinition='http://hl7.org/fhir/StructureDefinition/Element' and kind='complex-type')"}}
        {{#if (notIn type "BackboneElement,Narrative")}}
        case "{{type}}":
          if (component.max === "*") {
            if (!Array.isArray(component.value) || !component.value.length) {
              return undefined;
            }

            return `<li><span class="fhir-attr">${
            component.attr
          }</span>: <span class="fhir-value">${component.value.map(x => narrativeTextFor{{type}}(x)).join(
            ", "
          )}</span></li>`;
          }

          return `<li><span class="fhir-attr">${component.attr}</span>: <span class="fhir-value">narrativeTextFor{{type}}(component.value)</span></li>`;
        {{/if}}
      {{/fhirPath}}
      default:
        if (component.max === "*") {
          if (!Array.isArray(component.value) || !component.value.length) {
            return undefined;
          }

          return `<li><span class="fhir-attr">${
            component.attr
          }</span>: <span class="fhir-value">${component.value.join(
            ", "
          )}</span></li>`;
        }

        if (! component.value.toString().trim() ||  component.value.toString().trim() === "[object Object]") {
          return undefined;
        }

        return `<li><span class="fhir-attr">${component.attr}</span>: <span class="fhir-value">${ component.value}</span></li>`;
    }
  } catch {
    return undefined;
  }
}

{{#fhirPath data.[profiles-types] "Bundle.entry.select(resource).ofType(StructureDefinition).where(baseDefinition='http://hl7.org/fhir/StructureDefinition/Element' and kind='complex-type')"}}
{{#if (notIn type "BackboneElement,Narrative")}}
/**
 * Return a text representation for an element
 */
export function narrativeTextFor{{type}}(element: {{type}} | null | undefined): string | undefined {
  if (!element) {
    return undefined;
  }

  return [
    {{#fhirPath this "StructureDefinition.snapshot.element.where(isSummary=true)"}}
        {{#if (elementImmediatePath path)}}
          ["{{startCase (elementImmediatePath path)}}", element.{{elementImmediatePath path}}],
        {{/if}}
      {{/fhirPath}}
  ]
  .filter(x => !!`${x[1] || ""}`.trim())
  .map(x => `<span class="fhir-element-attr">${x[0]}</span>: <span class="fhir-element-attr">${x[1]}</span>`)
  .join(" ")
}
{{/if}}
{{/fhirPath}}
