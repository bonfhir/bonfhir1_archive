import type { DomainResource, FhirResource, Resource } from "fhir/r4";
{{#each (fhirPath data.[profiles-types] "Bundle/ComplexElements")}}
import type { {{type}} } from "fhir/r4";
{{/each}}

/**
 * All the possible resource types.
 */
export type ResourceType = FhirResource["resourceType"];

/**
 * Allow referencing a resource type from its string ResourceType representation.
 */
export type ExtractResource<TResourceType extends ResourceType> = Extract<
  FhirResource,
  { resourceType: TResourceType }
>;

/**
 * All the resources types for DomainResource only.
 */
export const DomainResourceTypes: string[] = [
{{#each (fhirPath data.[profiles-resources] "Bundle/DomainResources")}}
"{{type}}",
{{/each}}
];

/**
 * Return true if `resource` is a `DomainResource`.
 */
export function isDomainResource(
  resource: Resource
): resource is DomainResource {
  return DomainResourceTypes.includes(resource.resourceType);
}

export type AnnotatedComplexElement =
{{#each (fhirPath data.[profiles-types] "Bundle/ComplexElements")}}| ({{type}} & { readonly elementType: "{{type}}" }){{/each}};

export type ComplexElementType = AnnotatedComplexElement["elementType"];

/**
 * Allow referencing a resource type from its string ResourceType representation.
 */
export type ExtractComplexElement<TComplexElement extends ComplexElementType> = Omit<Extract<AnnotatedComplexElement, { elementType: TComplexElement }>, "elementType">;

export type PrimitiveElementType = {{#each (fhirPath data.[profiles-types] "Bundle/PrimitiveElements")}}| "{{type}}"{{/each}};
